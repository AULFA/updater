dependencies {
  implementation project(":au.org.libraryforall.updater.apkinstaller.api")
  implementation project(":au.org.libraryforall.updater.apkinstaller.device")
  implementation project(":au.org.libraryforall.updater.installed.api")
  implementation project(":au.org.libraryforall.updater.installed.vanilla")
  implementation project(":au.org.libraryforall.updater.inventory.api")
  implementation project(":au.org.libraryforall.updater.inventory.vanilla")
  implementation project(":au.org.libraryforall.updater.repository.api")

  implementation libraries.androidMaterial
  implementation libraries.androidXActivity
  implementation libraries.androidXAppCompat
  implementation libraries.androidXConstraintLayout
  implementation libraries.androidXCore
  implementation libraries.conductor
  implementation libraries.kotlinStdlib
  implementation libraries.rxjava
  implementation (libraries.slf4j) {
    force = true
  }
  implementation libraries.logbackAndroid
  implementation libraries.irradiaHTTPAPI
  implementation libraries.irradiaHTTPVanilla
}

def versionValues() {
  def propsFile = file('version.properties')
  def Properties props = new Properties()
  def code
  if (propsFile.canRead()) {
    props.load(new FileInputStream(propsFile))
    code = props['versionCode'].toInteger()
  } else {
    throw new FileNotFoundException("Could not read version.properties!")
  }

  props['versionCode'] = (code + 1).toString()
  props.store(new FileOutputStream(propsFile), "")

  logger.info("incrementing build version ${code} -> ${code + 1}")
  return code
}

def getGitHash = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

android {
  def version = versionValues()

  defaultConfig {
    buildConfigField "String", "GIT_COMMIT", "\"${getGitHash()}\""
    versionName = VERSION_NAME
    versionCode = version
    setProperty("archivesBaseName", "lfa-updater-${versionName}-${versionCode}")
  }
}
