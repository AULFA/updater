import java.security.MessageDigest

buildscript {
  if ("$gradle.gradleVersion" != "6.7") {
    throw new GradleException("Gradle version 6.7 is required (received $gradle.gradleVersion)")
  }

  ext.kotlin_version = "1.4.20"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:5.2.0"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.android.tools.build:gradle:4.1.1'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.23.0"
  id "digital.wup.android-maven-publish" version "3.6.2"
  id "ru.vyarus.animalsniffer" version "1.5.0"
}

ext {
  androidBuildToolsVersion = "29.0.2"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion = 28

  if (project.hasProperty("one.lfa.directory.publish")) {
    useDirectoryPublishPath = project.property("one.lfa.directory.publish")
    useDirectoryPublish = true
    logger.warn("one.lfa.directory.publish is set: We will publish artifacts to ${useDirectoryPublishPath}")
  } else {
    logger.warn("one.lfa.directory.publish is not set: We will not publish artifacts to a custom directory")
    useDirectoryPublish = false
    useDirectoryPublishPath = null
  }
}

ext.libraries = [
  androidMaterial               : "com.google.android.material:material:1.0.0",
  androidSupportTestRules       : "com.android.support.test:rules:1.0.2",
  androidSupportTestRunner      : "com.android.support.test:runner:1.0.2",
  androidTestOrchestrator       : "com.android.support.test:orchestrator:1.0.2",
  androidXActivity              : "androidx.activity:activity-ktx:1.1.0-alpha02",
  androidXAppCompat             : "androidx.appcompat:appcompat:1.1.0-rc01",
  androidXConstraintLayout      : "androidx.constraintlayout:constraintlayout:1.1.3",
  androidXCore                  : "androidx.core:core-ktx:1.2.0-alpha03",
  androidXWorkManager           : "androidx.work:work-runtime-ktx:2.2.0",
  conductor                     : "com.bluelinelabs:conductor:3.0.0-rc2",
  googleGuava                   : "com.google.guava:guava:27.1-android",
  irradiaHTTPAPI                : "one.irradia.http:one.irradia.http.api:0.0.3",
  irradiaHTTPVanilla            : "one.irradia.http:one.irradia.http.vanilla:0.0.3",
  jackson                       : "com.fasterxml.jackson.core:jackson-core:2.9.8",
  jcip                          : "com.io7m.jcip:jcip-annotations:1.0.2",
  jodaTime                      : "joda-time:joda-time:2.10.3",
  junit                         : "junit:junit:4.12",
  kotlinReflect                 : "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
  kotlinStdlib                  : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
  logbackAndroid                : "com.github.tony19:logback-android:2.0.0",
  logbackClassic                : "ch.qos.logback:logback-classic:1.3.0-alpha4",
  mockito                       : "org.mockito:mockito-core:2.27.0",
  nanohttpd                     : 'org.nanohttpd:nanohttpd:2.3.1',
  okhttp                        : "com.squareup.okhttp3:okhttp:3.14.1",
  OSGiBundleAnnotation          : "org.osgi:org.osgi.annotation.bundle:1.0.0",
  OSGiBundleVersionAnnotation   : "org.osgi:org.osgi.annotation.versioning:1.1.0",
  rxjava                        : "io.reactivex.rxjava2:rxjava:2.2.12",
  slf4j                         : "org.slf4j:slf4j-api:1.7.25",
  xerces                        : "xerces:xercesImpl:2.12.0"
]

allprojects {
  group = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

static def sha256Of(File file) {
  MessageDigest digest = MessageDigest.getInstance("SHA-256")
  digest.update(file.getBytes())
  return digest.digest().encodeHex().toString()
}

task preFlightChecks {
  logger.info("running pre-flight checks")

  def keystoreHash = "20dfb53906594f4ae7a77df3d92f87f1c003c6a824b0b541c23c3185fd603da8"

  def requiredFiles = [:]
  requiredFiles["lfa-keystore.jks"] = keystoreHash
  requiredFiles["one.lfa.updater.app/src/main/assets/bundled_credentials.xml"] = "3186190d091144e2c108a3d0675d5176b6396310f0abdc9071c1c283ed431893"

  def missingFiles = []
  for (entry in requiredFiles) {
    logger.info("Checking ${entry.key} exists and has expected digest value")

    try {
      def received = sha256Of(file(entry.key))
      def expected = entry.value
      if (received != expected) {
        logger.error("ERROR: File ${entry.key} has incorrect SHA-256 hash")
        logger.error("  Expected: ${expected}")
        logger.error("  Received: ${received}")
        missingFiles.add(entry.key)
      }
    } catch (Exception e) {
      logger.error("ERROR: Could not open required file ${entry.key}: ${e.getClass()}: ${e.getMessage()}")
      missingFiles.add(entry.key)
    }
  }

  if (!missingFiles.isEmpty()) {
    throw new FileNotFoundException("One or more required files are missing or have incorrect contents.")
  }
}

subprojects { project ->

  switch (POM_PACKAGING) {
    case "jar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as jar project")

      apply plugin: "java"
      apply plugin: "java-library"
      apply plugin: "kotlin"

      java {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
      }

      compileKotlin {
        kotlinOptions {
          jvmTarget = "1.8"
        }
      }

      /*
       * Apply the Animal Sniffer plugin to check that code is Android compatible.
       */

      apply plugin: "ru.vyarus.animalsniffer"

      dependencies {
        signature "org.codehaus.mojo.signature:java16:1.1@signature"
        signature "net.sf.androidscents.signature:android-api-level-14:4.0_r4@signature"
      }

      /*
       * Build an OSGi bundle.
       */

      apply plugin: "biz.aQute.bnd.builder"

      jar {
        bnd """
Automatic-Module-Name: ${POM_AUTOMATIC_MODULE_NAME}

-removeheaders: Bnd-LastModified, Tool, Private-Package
"""
      }
      break

    case "apk":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android application project")

      apply plugin: "com.android.application"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
      }
      break

    case "aar":
      logger.info("Configuring ${project} (${POM_PACKAGING}) as Android library project")

      apply plugin: "com.android.library"
      apply plugin: "kotlin-android"

      android {
        compileSdkVersion androidCompileSDKVersion
        buildToolsVersion androidBuildToolsVersion

        defaultConfig {
          minSdkVersion androidMinimumSDKVersion
          targetSdkVersion androidTargetSDKVersion
          testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
          jvmTarget = JavaVersion.VERSION_1_8.toString()
        }
        testOptions {
          execution "ANDROID_TEST_ORCHESTRATOR"
          animationsDisabled = true
        }
      }
      break

    default:
      throw new IllegalStateException(
        "Unrecognized packaging type ${POM_PACKAGING} for ${project}")
  }

  task javadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task sourcesJar(type: Jar) {
    classifier = "sources"
    from "src/main/java", "src/main/resources"
  }

  repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    google()
  }
}

/**
 * Empty tasks called by CI. We don't do semantic versioning analysis or linting here yet.
 */

task verifySemanticVersioning {

}

task ktlint {

}
