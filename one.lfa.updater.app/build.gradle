dependencies {
  implementation project(":one.lfa.updater.apkinstaller.api")
  implementation project(":one.lfa.updater.apkinstaller.device")
  implementation project(":one.lfa.updater.contenturis")
  implementation project(":one.lfa.updater.credentials.api")
  implementation project(":one.lfa.updater.installed.api")
  implementation project(":one.lfa.updater.installed.vanilla")
  implementation project(":one.lfa.updater.inventory.api")
  implementation project(":one.lfa.updater.inventory.vanilla")
  implementation project(":one.lfa.updater.opds.api")
  implementation project(":one.lfa.updater.opds.database.api")
  implementation project(":one.lfa.updater.opds.database.vanilla")
  implementation project(":one.lfa.updater.opds.xml.api")
  implementation project(":one.lfa.updater.opds.xml.v1_0")
  implementation project(":one.lfa.updater.repository.api")
  implementation project(":one.lfa.updater.repository.xml.api")
  implementation project(":one.lfa.updater.repository.xml.v1_0")
  implementation project(":one.lfa.updater.repository.xml.v2_0")
  implementation project(":one.lfa.updater.repository.xml.v3_0")
  implementation project(":one.lfa.updater.xml.spi")

  implementation libraries.android_material
  implementation libraries.androidx_recyclerview
  implementation libraries.androidx_activity
  implementation libraries.androidx_appcompat
  implementation libraries.androidx_constraintlayout
  implementation libraries.androidx_core
  implementation libraries.androidx_work_manager
  implementation libraries.conductor
  implementation libraries.irradia_http_api
  implementation libraries.irradia_http_vanilla
  implementation libraries.kotlin_stdlib
  implementation libraries.logback_android
  implementation libraries.rxjava

  implementation (libraries.slf4j) {
    force = true
  }
}

def versionValues() {
  def propsFile = file('version.properties')
  def Properties props = new Properties()
  def code
  if (propsFile.canRead()) {
    props.load(new FileInputStream(propsFile))
    code = props['versionCode'].toInteger()
  } else {
    throw new FileNotFoundException("Could not read version.properties!")
  }

  props['versionCode'] = (code + 1).toString()
  props.store(new FileOutputStream(propsFile), "")

  logger.info("incrementing build version ${code} -> ${code + 1}")
  return code
}

def getGitHash = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

android {
  def version = versionValues()

  signingConfigs {
    debug {
      keyAlias findProperty("au.org.libraryforall.keyAlias")
      keyPassword findProperty("au.org.libraryforall.keyPassword")
      storeFile file("${project.rootDir}/lfa-keystore.jks")
      storePassword findProperty("au.org.libraryforall.storePassword")
    }
    release {
      keyAlias findProperty("au.org.libraryforall.keyAlias")
      keyPassword findProperty("au.org.libraryforall.keyPassword")
      storeFile file("${project.rootDir}/lfa-keystore.jks")
      storePassword findProperty("au.org.libraryforall.storePassword")
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.release
    }
  }

  defaultConfig {
    buildConfigField "String", "GIT_COMMIT", "\"${getGitHash()}\""
    versionName = VERSION_NAME
    versionCode = version
    setProperty("archivesBaseName", "lfa-updater-${versionName}-${versionCode}")
  }
}
